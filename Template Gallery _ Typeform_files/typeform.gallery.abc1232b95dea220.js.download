var BlankFormGallery;

BlankFormGallery = (function() {
  BlankFormGallery.prototype.$sendButton = null;

  BlankFormGallery.prototype.elem = null;

  BlankFormGallery.prototype.trackingLocation = 'templateGallery';

  function BlankFormGallery(text, trackUserBehaviour, url, template, spinner) {
    this.text = text;
    this.trackUserBehaviour = trackUserBehaviour;
    this.url = url;
    this.template = template;
    this.spinner = spinner;
  }

  BlankFormGallery.prototype.render = function() {
    var _this = this;
    this.elem = $.popup({
      content: this.template,
      title: this.text.trans('messages.gallery-new-form-title'),
      okLabel: this.text.trans('messages.gallery-new-form-ok-button'),
      cancelLabel: this.text.trans('messages.gallery-new-form-cancel-button'),
      width: 320,
      onShow: function() {
        return _this.init();
      }
    });
    return this.trackUserBehaviour.trackStartFromScratch(this.trackingLocation);
  };

  BlankFormGallery.prototype.init = function() {
    this.$sendButton = this.elem.$dialogWrapper.find('.send');
    this.listenerEvents();
    return this.customSelect();
  };

  BlankFormGallery.prototype.validateForm = function() {
    var form, name;
    this.clearErrosForm();
    form = this.elem.$dialogWrapper.find('form');
    name = form.find('#quickyform_name').val();
    if (name === '' || name.length < 3) {
      form.find('#quickyform_name').addClass('error');
      this.listeningSendButton();
      return false;
    }
    if (form.find('#language').val() === '') {
      form.find('.select2-container').addClass('error');
      this.listeningSendButton();
      return false;
    }
    return this.formAjaxRequest();
  };

  BlankFormGallery.prototype.closeForm = function() {
    this.clearErrosForm();
    return this.elem.close();
  };

  BlankFormGallery.prototype.formAjaxRequest = function() {
    var form, formLanguage, formTitle,
      _this = this;
    this.onLoading(true);
    form = this.elem.$dialogWrapper.find('form');
    formTitle = form.find('#quickyform_name').val();
    formLanguage = form.find('#language').val();
    return $.ajax({
      url: this.url,
      data: this.getData(),
      type: "POST",
      success: function(r) {
        var callbackAfterTracking, formId, formUid, tracking;
        callbackAfterTracking = function() {
          return window.location = r.adminFormUrl;
        };
        _this.trackUserBehaviour.trackNewTypeform({
          'label': 'new-typeform',
          'location': _this.trackingLocation
        });
        formId = r.data.id;
        formUid = r.data.uid;
        tracking = tf.services.tracking;
        return tracking.client.sendEvent(tracking.events.CREATE_TYPEFORM, {
          account_id: tracking.AccountId.get(),
          typeform_version: tracking.TypeformVersion.V1,
          typeform_property: tracking.TypeformProperty.WEB_PLATFORM,
          unique_pageview_id: tracking.UniquePageViewId.get(),
          unique_sectionview_id: tracking.UniqueSectionViewId.NA,
          form_title: formTitle,
          form_language: formLanguage,
          created_from: tracking.CreatedFrom.SCRATCH,
          form_id: formId,
          form_uid: formUid,
          template_id: tracking.TemplateId.NULL,
          tracking_session_id: tracking.TrackingSessionId.get(),
          workspace_owner_account_id: tracking.WorkspaceOwnerId.get(),
          natero_feature_name: tracking.events.CREATE_TYPEFORM + '_' + tracking.CreatedFrom.SCRATCH
        }, callbackAfterTracking);
      },
      error: function() {
        return _this.listeningSendButton();
      }
    });
  };

  BlankFormGallery.prototype.getData = function() {
    return this.elem.$dialogWrapper.find('form').serializeArray();
  };

  BlankFormGallery.prototype.onLoading = function(status) {
    var $spinnerContainer;
    $spinnerContainer = this.elem.$dialogWrapper.find('.spinner-container');
    if (status) {
      $spinnerContainer.addClass('loading');
      return this.spinner($spinnerContainer, {
        color: '#86c2c2'
      });
    } else {
      return $spinnerContainer.removeClass('loading');
    }
  };

  BlankFormGallery.prototype.clearErrosForm = function() {
    return this.elem.$dialogWrapper.find('.error').removeClass('error');
  };

  BlankFormGallery.prototype.listenerEvents = function() {
    var _this = this;
    this.listeningSendButton();
    this.elem.$dialogWrapper.find('.cancel').on("click", function(elem) {
      return _this.closeForm();
    });
    this.elem.$dialogWrapper.find('#quickyform_name').on("change keyup", function() {
      return $(this).removeClass('error');
    });
    return setTimeout(function() {
      return _this.elem.$dialogWrapper.find('.non-blank').eq(0).focus();
    }, 100);
  };

  BlankFormGallery.prototype.customSelect = function(elem) {
    return this.elem.$dialogWrapper.find('select').select2({
      placeholder: this.text.trans('messages.gallery-new-form-choose'),
      minimumResultsForSearch: 0
    });
  };

  BlankFormGallery.prototype.listeningSendButton = function() {
    var _this = this;
    return this.$sendButton.one("click", function(e) {
      _this.validateForm();
      return e.preventDefault();
    });
  };

  return BlankFormGallery;

})();

namespace("Typeform.Gallery", function(exports) {
  return exports.BlankFormGallery = BlankFormGallery;
});

var WarningGallery;

WarningGallery = (function() {
  WarningGallery.prototype.buttonAction = null;

  WarningGallery.prototype.elem = null;

  WarningGallery.prototype.formUid = null;

  function WarningGallery(trackUserBehaviour, buttonAction, elem) {
    this.trackUserBehaviour = trackUserBehaviour;
    this.buttonAction = buttonAction;
    this.elem = elem;
    this.listenerEvents();
  }

  WarningGallery.prototype.open = function(formUid) {
    this.formUid = formUid;
    this.trackUserBehaviour('warningProTemplate');
    this.visible(true);
    return this.setDuplicateButtonUrl();
  };

  WarningGallery.prototype.close = function() {
    return this.visible(false);
  };

  WarningGallery.prototype.setDuplicateButtonUrl = function() {
    var $doubleApply, applyUrl,
      _this = this;
    $doubleApply = this.elem.find('.double-apply');
    if (this.buttonAction instanceof Function) {
      return $doubleApply.on('click', function() {
        return _this.buttonAction();
      });
    } else {
      applyUrl = this.buttonAction.replace(/_uid_/, this.formUid);
      $doubleApply.attr('href', applyUrl);
      return $doubleApply.on('click', function(e) {
        var linkRedirect;
        e.preventDefault();
        linkRedirect = function(link) {
          var url;
          url = link.attr('href');
          return setTimeout((function() {
            return window.location = url;
          }), 0);
        };
        _this.showSpinner($doubleApply);
        linkRedirect($doubleApply);
        return false;
      });
    }
  };

  WarningGallery.prototype.visible = function(status) {
    if (status) {
      return this.elem.addClass('showing');
    } else {
      return this.elem.removeClass('showing');
    }
  };

  WarningGallery.prototype.listenerEvents = function() {
    var self,
      _this = this;
    self = this;
    this.elem.find('.close-button').on("click", function() {
      return _this.close();
    });
    this.elem.find('.double-apply').on("click", function() {
      return _.defer(function() {
        return _this.trackUserBehaviour('useThisTemplate', {
          'templateUid': _this.formUid
        });
      });
    });
    return window.addEventListener('popstate', function() {
      var doubleApply;
      if (self.elem) {
        doubleApply = self.elem.find('.double-apply');
        if (doubleApply) {
          return self.hideSpinner(doubleApply);
        }
      }
    });
  };

  WarningGallery.prototype.showSpinner = function(button) {
    var createTypeformButtonColor, itemSpinner, spinnerOptions;
    button.addClass('loading');
    button.find('.content').css('visibility', 'hidden');
    itemSpinner = button.children('.block-spinner');
    createTypeformButtonColor = button.css('color');
    spinnerOptions = {
      hwaccel: true,
      color: createTypeformButtonColor
    };
    return this.spinner = new Spinner(spinnerOptions).spin(itemSpinner[0]);
  };

  WarningGallery.prototype.hideSpinner = function(button) {
    if (this.spinner) {
      this.spinner.stop();
    }
    if (button) {
      button.removeClass('loading');
      return button.find('.content').css('visibility', 'visible');
    }
  };

  return WarningGallery;

})();

namespace("Typeform.Gallery", function(exports) {
  return exports.WarningGallery = WarningGallery;
});

var PreviewTemplate;

PreviewTemplate = (function() {
  PreviewTemplate.prototype.$applyButton = null;

  PreviewTemplate.prototype.$upgradeButton = null;

  PreviewTemplate.prototype.$iframe = null;

  PreviewTemplate.prototype.preview = null;

  PreviewTemplate.prototype.$placeholder = null;

  PreviewTemplate.prototype.$reloadButton = null;

  PreviewTemplate.prototype.$tabButton = null;

  PreviewTemplate.prototype.$spinner = null;

  PreviewTemplate.prototype.backgroundColor = null;

  PreviewTemplate.prototype.baseDuplicateUrl = null;

  PreviewTemplate.prototype.templateUrl = null;

  PreviewTemplate.prototype.formUid = null;

  PreviewTemplate.prototype.duplicateButton = null;

  PreviewTemplate.prototype.isTrial = 0;

  function PreviewTemplate(trackUserBehaviour, blankForm, warning, baseDuplicateUrl, baseUpgradeUrl) {
    this.trackUserBehaviour = trackUserBehaviour;
    this.blankForm = blankForm;
    this.warning = warning;
    this.baseDuplicateUrl = baseDuplicateUrl;
    this.baseUpgradeUrl = baseUpgradeUrl;
    this.init();
  }

  PreviewTemplate.prototype.clearPreview = function() {
    this.$iframe.removeAttr('src');
    this.$spinner.hide();
    return this.$placeholder.show();
  };

  PreviewTemplate.prototype.init = function() {
    this.setContainers();
    return this.listenerEvents();
  };

  PreviewTemplate.prototype.setContainers = function() {
    this.preview = $('#preview');
    this.$applyButton = this.preview.find('#preview-apply');
    this.$upgradeButton = this.preview.find('#upgrade-button');
    this.$iframe = this.preview.find('iframe');
    this.$placeholder = this.preview.find('#preview-placeholder');
    this.$reloadButton = this.preview.find('#preview-reload');
    this.$tabButton = this.preview.find('#preview-tab');
    return this.$spinner = this.preview.find('#preview-spinner');
  };

  PreviewTemplate.prototype.setElements = function(options) {
    return this.element = _.extend({}, this.element, options);
  };

  PreviewTemplate.prototype.fillOptions = function(formconfig) {
    this.backgroundColor = formconfig.backgroundColor;
    this.formUid = formconfig.formUid;
    this.isTrial = formconfig.hasProFeatures;
    this.templateUrl = formconfig.formUrl;
  };

  PreviewTemplate.prototype.render = function(formconfig) {
    this.fillOptions(formconfig);
    this.updateSpinner();
    this.warning.visible(false);
    this.setIframeSrc();
    this.setOpenNewTabButtonHref();
    this.setApplyHref();
    this.listenerEvents();
    return this.enablePreviewButtons();
  };

  PreviewTemplate.prototype.setIframeSrc = function() {
    var _this = this;
    this.$iframe.removeAttr('src');
    this.$spinner.show();
    return _.defer(function() {
      _this.$iframe.attr('src', _this.templateUrl);
      return _this.$iframe[0].contentWindow.focus();
    });
  };

  PreviewTemplate.prototype.updateSpinner = function() {
    var opts;
    opts = {
      lines: 16,
      length: 3,
      color: "#" + this.backgroundColor,
      width: 3,
      radius: 14,
      speed: 2.1,
      trail: 60,
      shadow: false,
      hwaccel: false
    };
    return this.$spinner.spin(opts);
  };

  PreviewTemplate.prototype.setApplyHref = function() {
    var applyUrl;
    applyUrl = this.baseDuplicateUrl.replace(/_uid_/, this.formUid);
    return this.$applyButton.attr('href', applyUrl);
  };

  PreviewTemplate.prototype.setUpgradeHref = function() {
    var upgradeUrl;
    upgradeUrl = this.baseUpgradeUrl.replace(/_uid_/, this.formUid);
    return this.$upgradeButton.attr('href', upgradeUrl);
  };

  PreviewTemplate.prototype.setOpenNewTabButtonHref = function() {
    return this.preview.find('.link').attr('href', this.templateUrl);
  };

  PreviewTemplate.prototype.openWarning = function() {
    this.warning.open(this.formUid);
    return false;
  };

  PreviewTemplate.prototype.showPopup = function() {
    this.setUpgradeHref();
    return this.openWarning();
  };

  PreviewTemplate.prototype.enablePreviewButtons = function() {
    this.$reloadButton.removeClass('disabled');
    this.$tabButton.removeClass('disabled');
    this.$reloadButton.tooltip();
    this.$tabButton.tooltip();
    this.$applyButton.removeClass('disabled');
    return this.$placeholder.hide();
  };

  PreviewTemplate.prototype.enableDuplicateButton = function(status) {
    if (status) {
      this.duplicateButton = true;
      this.$applyButton.removeClass('loading');
      return this.$applyButton.removeClass('disabled');
    } else {
      this.duplicateButton = false;
      this.$applyButton.addClass('loading');
      return this.$applyButton.addClass('disabled');
    }
  };

  PreviewTemplate.prototype.duplicate = function() {
    if (this.formUid === null) {
      this.formUid = $('#template-items').data('formuid');
    }
    if (this.formUid === null) {
      return false;
    }
    if (this.$applyButton.attr('href') === void 0) {
      this.setApplyHref();
    }
    if (this.haveToShowWarning()) {
      return this.showPopup();
    } else {
      return this.trackDuplicateTemplate();
    }
  };

  PreviewTemplate.prototype.haveToShowWarning = function() {
    return !this.isASharedWorkspace() && this.isTrial === true && Typeform.Business.isProPlan() === false;
  };

  PreviewTemplate.prototype.isASharedWorkspace = function() {
    return tf.data.ext.json('workspaceData').isShared;
  };

  PreviewTemplate.prototype.trackDuplicateTemplate = function() {
    var _this = this;
    return _.defer(function() {
      window.localStorage.removeItem('workspaces-index');
      return _this.trackUserBehaviour('useThisTemplate', {
        'templateUid': _this.formUid
      });
    });
  };

  PreviewTemplate.prototype.reload = function() {
    this.warning.visible(false);
    this.enableDuplicateButton(true);
    return this.$iframe.attr('src', this.templateUrl);
  };

  PreviewTemplate.prototype.listenerEvents = function() {
    var _this = this;
    this.$reloadButton.on("click", function() {
      if (_this.$reloadButton.hasClass('disabled')) {
        return false;
      }
      return _this.reload();
    });
    this.$applyButton.on("click", function(elem) {
      if (_this.duplicateButton === false) {
        return false;
      }
      if (_this.$applyButton.hasClass('disabled')) {
        return false;
      }
      return _this.duplicate();
    });
    return this.preview.find('.scratch').on("click", function() {
      return _this.blankForm.render();
    });
  };

  return PreviewTemplate;

})();

namespace("Typeform.Gallery", function(exports) {
  return exports.PreviewTemplate = PreviewTemplate;
});

var GalleryTagManager;

GalleryTagManager = (function() {
  var getFormattedTags, getSelect2Options, trackingChangeTag;

  GalleryTagManager.prototype.$dropdownBase = null;

  GalleryTagManager.prototype.currentTag = null;

  GalleryTagManager.prototype.galleryContainer = null;

  function GalleryTagManager(trackUserBehaviour, preview, gallery, trans, spinner, dropdown) {
    this.trackUserBehaviour = trackUserBehaviour;
    this.preview = preview;
    this.gallery = gallery;
    this.trans = trans;
    this.spinner = spinner;
    this.dropdown = dropdown;
    this.setElements();
    this.launchSpinner();
    this.renderSearchTag();
  }

  GalleryTagManager.prototype.setElements = function() {
    this.galleryContainer = $(".gallery");
    this.templatesContainer = $("#template-items");
    return this.$dropdownBase = this.galleryContainer.find(".search");
  };

  GalleryTagManager.prototype.launchSpinner = function() {
    return this.spinner(this.galleryContainer.find('.spinner-div'), {
      color: '#86c2c2'
    });
  };

  GalleryTagManager.prototype.renderSearchTag = function() {
    var formatedTags;
    formatedTags = getFormattedTags.call(this);
    this.applySelect2Plugin(this.$dropdownBase, getSelect2Options.call(this, formatedTags));
    return this.listenerEvents();
  };

  getFormattedTags = function() {
    var tags;
    tags = this.$dropdownBase.data('tags');
    return this.dropdown.formatData(tags);
  };

  getSelect2Options = function(tags) {
    return {
      placeholder: this.trans('messages.gallery-tag-search'),
      minimumResultsForSearch: Infinity,
      allowClear: true,
      dropdownCssClass: 'drop-tags',
      data: tags
    };
  };

  GalleryTagManager.prototype.applySelect2Plugin = function(elem, options) {
    return elem.select2(options);
  };

  GalleryTagManager.prototype.loading = function(display) {
    if (display) {
      this.launchSpinner();
      return this.galleryContainer.addClass('loading');
    } else {
      return this.galleryContainer.removeClass('loading');
    }
  };

  GalleryTagManager.prototype.getTemplatesByAjax = function() {
    this.getFilteredTag();
    this.loading(true);
    return this.ajaxRequest();
  };

  GalleryTagManager.prototype.ajaxRequest = function() {
    var _this = this;
    return $.ajax({
      url: tf.data.ext.json('paths').get_templates_by_tags,
      data: JSON.stringify({
        tag: this.currentTag
      }),
      contentType: 'application/json; charset=utf-8',
      type: "POST",
      dataType: "html",
      success: function(data) {
        _this.loading(false);
        return _this.renderView(data);
      }
    });
  };

  GalleryTagManager.prototype.getFilteredTag = function() {
    return this.currentTag = this.$dropdownBase.val();
  };

  GalleryTagManager.prototype.renderView = function(html) {
    this.templatesContainer.html(html);
    return this.gallery.init();
  };

  GalleryTagManager.prototype.listenerEvents = function() {
    var _this = this;
    this.$dropdownBase.on('change', function(e) {
      var slug;
      slug = e.target.value;
      return _this.changeTag(slug);
    });
    return this.$dropdownBase.on('open', function() {
      return _this.trackUserBehaviour.trackOpenTemplateGalleryDropdownTags();
    });
  };

  trackingChangeTag = function(slug) {
    if (_.isEmpty(slug)) {
      return this.trackUserBehaviour.trackRemoveTemplateGalleryTag(this.currentTag);
    } else {
      return this.trackUserBehaviour.trackSelectTemplateGalleryTag(slug);
    }
  };

  GalleryTagManager.prototype.changeTag = function(slug) {
    trackingChangeTag.call(this, slug);
    this.currentTag = slug;
    this.preview.clearPreview();
    return this.getTemplatesByAjax();
  };

  return GalleryTagManager;

})();

namespace("Typeform.Gallery", function(exports) {
  return exports.TagManager = GalleryTagManager;
});

var GalleryTemplate;

GalleryTemplate = (function() {
  var buildUseTemplateURL;

  GalleryTemplate.prototype.templates = null;

  GalleryTemplate.prototype.currentTemplate = null;

  GalleryTemplate.prototype.baseDuplicateUrl = null;

  GalleryTemplate.prototype.options = {
    spinner: {
      width: 2,
      radius: 5,
      color: '#ffffff'
    }
  };

  function GalleryTemplate(userBehaviour, blankForm, preview, baseDuplicateUrl) {
    this.userBehaviour = userBehaviour;
    this.blankForm = blankForm;
    this.preview = preview;
    this.baseDuplicateUrl = baseDuplicateUrl;
    this.userBehaviour.trackEvent('openGallery');
    this.init();
  }

  GalleryTemplate.prototype.init = function() {
    this.templates = $('#templates');
    this.footer = $('.template-gallery-footer');
    this.useTemplateButton = $('#template-gallery-footer-template');
    this.startScratchButton = $('#template-gallery-footer-scratch');
    this.listenerEvents();
    return this.showFooterIfActive();
  };

  GalleryTemplate.prototype.setActive = function() {
    if (this.isBlankTemplate()) {
      return false;
    }
    this.clearActiveTemplate();
    this.currentTemplate.parent('li').addClass('active');
    this.trackSelectTemplate(this.currentTemplate.data('formuid'));
    return this.preview.render(this.currentTemplate.data('formconfig'));
  };

  GalleryTemplate.prototype.showFooterIfActive = function() {
    var template;
    template = this.templates.find('.active');
    if (template.length > 0) {
      return this.footer.addClass('move-in');
    }
  };

  GalleryTemplate.prototype.isBlankTemplate = function() {
    return this.currentTemplate.parent('li').hasClass('blank');
  };

  GalleryTemplate.prototype.clearActiveTemplate = function() {
    return this.templates.find('.active').removeClass('active');
  };

  GalleryTemplate.prototype.trackSelectTemplate = function() {
    return this.userBehaviour.trackEvent('selectTemplate', {
      'templateUid': this.currentTemplate.data('formuid')
    });
  };

  GalleryTemplate.prototype.listenerEvents = function() {
    var self,
      _this = this;
    self = this;
    this.templates.find('li a').on("click", function(elem) {
      _this.currentTemplate = $(elem.target);
      _this.setActive();
      _this.hideFooterActions();
      setTimeout(function() {
        return _this.showFooterActions();
      }, 3000);
      return false;
    });
    this.useTemplateButton.on('click', function(e) {
      var formLanguage, formTitle, formUid, selectedTemplateData, templateId, useTemplateUrl;
      e.preventDefault();
      selectedTemplateData = _this.currentTemplate.data('formconfig');
      templateId = formUid = selectedTemplateData.formUid;
      formTitle = selectedTemplateData.name;
      formLanguage = selectedTemplateData.iso;
      if (_this.preview.haveToShowWarning()) {
        _this.preview.showPopup();
      } else {
        _this.showSpinner();
        useTemplateUrl = buildUseTemplateURL(self.baseDuplicateUrl, formUid);
        $.ajax({
          url: useTemplateUrl,
          type: 'GET',
          success: function(r) {
            var createdFormId, createdFormUid, goToNewTypeform, tracking, trackingData;
            createdFormId = r.data.id;
            createdFormUid = r.data.uid;
            trackingData = {
              'templateUid': formUid
            };
            _this.userBehaviour.trackEvent('useThisTemplate', trackingData, function() {
              return _this.userBehaviour.trackEvent('newtypeform', {
                label: 'duplicate-typeform',
                location: 'templateGallery'
              });
            });
            goToNewTypeform = function() {
              self = _this;
              return setTimeout((function() {
                var typeformUrl;
                typeformUrl = Routing.generate('_admin_form_fields', {
                  id: createdFormId
                });
                return window.location.href = typeformUrl;
              }), 0);
            };
            tracking = tf.services.tracking;
            return tracking.client.sendEvent(tracking.events.CREATE_TYPEFORM, {
              account_id: tracking.AccountId.get(),
              typeform_version: tracking.TypeformVersion.V1,
              typeform_property: tracking.TypeformProperty.WEB_PLATFORM,
              unique_pageview_id: tracking.UniquePageViewId.get(),
              unique_sectionview_id: tracking.UniqueSectionViewId.NA,
              form_title: formTitle,
              form_language: formLanguage,
              created_from: tracking.CreatedFrom.TEMPLATE,
              form_id: createdFormId,
              form_uid: createdFormUid,
              template_id: templateId,
              tracking_session_id: tracking.TrackingSessionId.get(),
              workspace_owner_account_id: tracking.WorkspaceOwnerId.get(),
              natero_feature_name: tracking.events.CREATE_TYPEFORM + '_' + tracking.CreatedFrom.TEMPLATE
            }, goToNewTypeform);
          }
        });
      }
      return false;
    });
    this.startScratchButton.on('click', function() {
      return _this.blankForm.render();
    });
    return window.addEventListener('popstate', function(e) {
      return self.hideSpinner();
    });
  };

  GalleryTemplate.prototype.hideFooterActions = function() {
    return this.footer.removeClass('move-in');
  };

  GalleryTemplate.prototype.showFooterActions = function() {
    return this.footer.addClass('move-in');
  };

  buildUseTemplateURL = function(url, formUid) {
    return url.replace(/_uid_/, formUid);
  };

  GalleryTemplate.prototype.showSpinner = function() {
    var createTypeformButtonColor, itemSpinner, spinnerOptions;
    this.useTemplateButton.addClass('loading');
    this.useTemplateButton.children('.content').hide();
    itemSpinner = this.useTemplateButton.children('.block-spinner');
    createTypeformButtonColor = this.useTemplateButton.css('color');
    spinnerOptions = {
      hwaccel: true,
      color: createTypeformButtonColor
    };
    return this.spinner = new Spinner(spinnerOptions).spin(itemSpinner[0]);
  };

  GalleryTemplate.prototype.hideSpinner = function() {
    if (this.spinner) {
      this.spinner.stop();
    }
    if (this.useTemplateButton) {
      this.useTemplateButton.removeClass('loading');
      return this.useTemplateButton.children('.content').show();
    }
  };

  return GalleryTemplate;

})();

namespace("Typeform.Gallery", function(exports) {
  return exports.GalleryTemplate = GalleryTemplate;
});

(function () {

    var Dropdown = function (trans) {

        var transitionGalleryTagPrimaryGroup = 'messages.gallery-tag-primary-group';
        var transitionGalleryTagSecondaryGroup = 'messages.gallery-tag-secondary-group';

        var buildDropdownData = function (tags) {
            var tagGroups = [buildMainTagsGroup(tags), buildSecondaryTagsGroup(tags)];

            return _.filter(tagGroups, function (elem) {
                return elem.children.length > 0;
            });
        };

        var buildMainTagsGroup = function(tags) {
            return buildDropdownGroup(extractMainGroup(tags), transitionGalleryTagPrimaryGroup);
        };

        var buildSecondaryTagsGroup = function(tags) {
            return buildDropdownGroup(extractSecondaryGroup(tags), transitionGalleryTagSecondaryGroup);
        };

        var extractMainGroup = function(tags) {
            return tags.filter(isMainTag).map(makeTag);
        };

        var extractSecondaryGroup = function(tags) {
            return tags.filter(isSecondaryTag).map(makeTag);
        };

        var isSecondaryTag = function(tag) {
            return !isMainTag(tag);
        };

        var isMainTag = function (tag) {
            return tag.main;
        };

        var makeTag = function(elem) {
            return {
                id: elem.slug,
                text: elem.name
            };
        };

        var buildDropdownGroup = function (groupData, messagesGalleryTagDataGroup) {
            return {
                text: trans(messagesGalleryTagDataGroup),
                children: groupData
            };
        };

        return {
            formatData: function (tags) {
                return buildDropdownData(tags);
            }
        };
    };

    namespace('Typeform.Gallery', function (exports) {
        exports.Dropdown = Dropdown;
    });
})();

var run;

run = function() {
  var blankForm, buttonAction, dropdown, galleryTemplate, galleryWarning, previewTemplate, tagManager;
  blankForm = new Typeform.Gallery.BlankFormGallery(tf.txt, tf.services.userBehaviour, tf.data.ext.json('paths').admin_form_add_blank, $('#blank-form').html(), Typeform.Spinner);
  buttonAction = tf.data.ext.json('paths').use_template;
  galleryWarning = new Typeform.Gallery.WarningGallery(tf.services.userBehaviour.trackEvent, buttonAction, $('#preview').find('.warning'));
  previewTemplate = new Typeform.Gallery.PreviewTemplate(tf.services.userBehaviour.trackEvent, blankForm, galleryWarning, tf.data.ext.json('paths').use_template, tf.data.ext.json('paths').upgrade_url);
  galleryTemplate = new Typeform.Gallery.GalleryTemplate(tf.services.userBehaviour, blankForm, previewTemplate, tf.data.ext.json('paths').use_template_ajax);
  dropdown = new Typeform.Gallery.Dropdown(tf.txt.trans);
  return tagManager = new Typeform.Gallery.TagManager(tf.services.userBehaviour, previewTemplate, galleryTemplate, tf.txt.trans, Typeform.Spinner, dropdown);
};

$(document).ready(run);
